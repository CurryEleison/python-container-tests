name: Boto3 container demo build and push

on:
  push:
    paths:
      - 'alpine-boto3-ecr/**/*'
      - '.github/workflows/ecr-build.yml'
jobs:
  boto3imagebuildpush:
    name: Build Boto3 image
    defaults:
      run:
        working-directory: ./alpine-boto3-ecr
    env:
      AWS_DEFAULT_REGION: eu-west-1
      ECR_REPOSITORY: alpine-boto3-demo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Branch information
        id: branchinfo
        run: |
          echo "::set-output name=isdefault::$([[ ${GITHUB_REF##*/} == "${{ github.event.repository.default_branch }}" ]] && echo true || echo false)"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: amd64,arm64
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ secrets.AWS_ECR_PUSH_ROLE_ARN }}
          # role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
          role-duration-seconds: 3600
          role-session-name: EcrBuildWorkerImageSession
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build image and tag it
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --load -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker image ls
      - name: Tag as latest and push repo if we are on default branch
        if: ${{ steps.branchinfo.outputs.isdefault == 'true' }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker image ls
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
